/* *************************************************************
TTEMDAT606.H - object to read and write the structure of the
	          output data from files generated by the 
	          Terrestrial Ecosystem Model (TEM)

Copyright © 2018.  The Marine Biological Laboratory. All Rights 
Reserved.  

Full license notice can be found in the LICENSE file at 
<https://github.com/MBL-TEM/TEM6.0.6/>  
  
************************************************************* */

#ifndef TTEMDAT606_H
#define TTEMDAT606_H

#include "temconsts606.hpp"

class Temdata60
{

  public:

     Temdata60( void );

/* *************************************************************
		 Public Functions
************************************************************* */

     int get( ifstream& ifile );

     int getdel( FILE* ifile );

     void getyrsum( double months[CYCLE] );

     void out( ofstream& ofile,
               const double& col,
               const double& row,
               const string& varname,
               const int& icohort,
               const int& standage,
               const int& potveg,
               const int& currentveg,
               const int& subtype,
               const int& cmnt,
               const int& agstate,
               const double& psiplusc,
               const int& qlcon,
               const long& carea,
               const long& subarea,
               const int& year,
               double mon[CYCLE],
               const string& region );

     void outdel( ofstream& ofile,
                  const double& col,
                  const double& row,
                  const string& varname,
                  const int& icohort,
                  const int& standage,
                  const int& potveg,
                  const int& currentveg,
                  const int& subtype,
                  const int& cmnt,
                  const int& agstate,
                  const double& psiplusc,
                  const int& qlcon,
                  const long& carea,
                  const long& subarea,
                  const int& year,
                  double mon[CYCLE],
                  const string& region );

     void pctout( ofstream& ofile,
                  const double& col,
                  const double& row,
                  const string& varname,
                  const int& icohort,
                  const int& standage,
                  const int& potveg,
                  const int& currentveg,
                  const int& subtype,
                  const int& cmnt,
                  const int& agstate,
                  const double& psiplusc,
                  const int& qlcon,
                  const long& carea,
                  const long& subarea,
                  const int& year,
                  double mon[CYCLE],
                  const string& region );

     void poutdel( ofstream& ofile,
                   const double& col,
                   const double& row,
                   const string& varname,
                   const int& icohort,
                   const int& standage,
                   const int& potveg,
                   const int& currentveg,
                   const int& subtype,
                   const int& cmnt,
                   const int& agstate,
                   const double& psiplusc,
                   const int& qlcon,
                   const long& carea,
                   const long& subarea,
                   const int& year,
                   double mon[CYCLE],
                   const string& region );

/* *************************************************************
		 Public Variables
************************************************************* */

     // Flag to indicate managed state of element during
     //   current year
     // state = 0 - natural vegetation
     // state = 1 - row-crop agriculture
     // state = 2 - pasture
     // state = 3 - urban area
     // state = 4 - tree plantation
     int agstate;

     // mean annual value for the grid cell
     double ave;              

     // area covered by grid cell (square kilometers)
     long carea;               

     // Index for community type
     int cmnt;
     
     // column or longitude of grid cell (degrees)
     double col;               

     // Current vegetation type in grid cell
     int currentveg;     
     
     // Cohort index
     int icohort;

     // maximum monthly value for the grid cell
     double max;                  
     
     // minimum monthly value for the grid cell
     double min;              
     
     // monthly values of the TEM output variable for the 
     //   grid cell
     
     double mon[CYCLE];       

     // Potential vegetation type of grid cell 
     //   (categorical data)
     int potveg;                
         
     // percent silt plus percent clay of the grid cell
     double psiplusc;         
     
     // quality control flag
     int qlcon;               
     
     // name of region containing grid cell
     string region;         

     // row or latitude of grid cell (degrees)
     double row;               


     // Stand age of cohort
     int standage;

     // area covered by cohort in a grid cell 
     //   (square kilometers)
     long subarea;               
     
     // vegetation subtype of grid cell (categorical data)
     int subtype;                

     // annual sum of monthly data for the grid cell
     double total;            

     // name of TEM output variable
     string varname;          


     // date (year) of data (transient version of TEM)
     //   or number of years until equilibrium are met 
     //  (equilibrium version of TEM)
     int year;                

  private:

/* ************************************************************
		      Private Variables
************************************************************ */

     int temend;
     long curpos;
     long lagpos;

};

#endif

